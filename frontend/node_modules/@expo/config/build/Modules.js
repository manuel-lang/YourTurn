"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const resolve_from_1 = __importDefault(require("resolve-from"));
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const Errors_1 = require("./Errors");
function resolveModule(request, projectRoot, exp) {
    const fromDir = exp.nodeModulesPath ? exp.nodeModulesPath : projectRoot;
    return resolve_from_1.default(fromDir, request);
}
exports.resolveModule = resolveModule;
function projectHasModule(modulePath, projectRoot, exp) {
    const fromDir = exp.nodeModulesPath ? exp.nodeModulesPath : projectRoot;
    return resolve_from_1.default.silent(fromDir, modulePath);
}
exports.projectHasModule = projectHasModule;
function moduleNameFromPath(modulePath) {
    if (modulePath.startsWith('@')) {
        const [org, packageName] = modulePath.split('/');
        if (org && packageName) {
            return [org, packageName].join('/');
        }
        return modulePath;
    }
    const [packageName] = modulePath.split('/');
    return packageName ? packageName : modulePath;
}
exports.moduleNameFromPath = moduleNameFromPath;
function fileExistsAsync(file) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            return (yield fs_extra_1.stat(file)).isFile();
        }
        catch (e) {
            return false;
        }
    });
}
exports.fileExistsAsync = fileExistsAsync;
function fileExists(file) {
    try {
        return fs_extra_1.statSync(file).isFile();
    }
    catch (e) {
        return false;
    }
}
exports.fileExists = fileExists;
function getRootPackageJsonPath(projectRoot, exp) {
    const packageJsonPath = 'nodeModulesPath' in exp && typeof exp.nodeModulesPath === 'string'
        ? path_1.join(path_1.resolve(projectRoot, exp.nodeModulesPath), 'package.json')
        : path_1.join(projectRoot, 'package.json');
    if (!fileExists(packageJsonPath)) {
        throw new Errors_1.ConfigError(`The expected package.json path: ${packageJsonPath} does not exist`, 'MODULE_NOT_FOUND');
    }
    return packageJsonPath;
}
exports.getRootPackageJsonPath = getRootPackageJsonPath;
//# sourceMappingURL=Modules.js.map