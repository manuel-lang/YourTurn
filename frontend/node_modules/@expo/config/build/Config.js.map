{"version":3,"file":"Config.js","sourceRoot":"","sources":["../src/Config.ts"],"names":[],"mappings":"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","sourcesContent":["import JsonFile, { JSONObject } from '@expo/json-file';\nimport path from 'path';\nimport slug from 'slugify';\n\nimport {\n  AppJSONConfig,\n  ConfigContext,\n  ExpRc,\n  ExpoConfig,\n  GetConfigOptions,\n  PackageJSONConfig,\n  Platform,\n  ProjectConfig,\n} from './Config.types';\n\nimport { ConfigError } from './Errors';\nimport { findAndEvalConfig } from './getConfig';\nimport { getRootPackageJsonPath, projectHasModule } from './Modules';\nimport { getExpoSDKVersion } from './Project';\n\n/**\n * Get all platforms that a project is currently capable of running.\n *\n * @param projectRoot\n * @param exp\n */\nfunction getSupportedPlatforms(\n  projectRoot: string,\n  exp: Pick<ExpoConfig, 'nodeModulesPath'>\n): Platform[] {\n  const platforms: Platform[] = [];\n  if (projectHasModule('react-native', projectRoot, exp)) {\n    platforms.push('ios', 'android');\n  }\n  if (projectHasModule('react-native-web', projectRoot, exp)) {\n    platforms.push('web');\n  }\n  return platforms;\n}\n\nfunction getConfigContext(\n  projectRoot: string,\n  options: GetConfigOptions\n): { context: ConfigContext; pkg: JSONObject } {\n  // TODO(Bacon): This doesn't support changing the location of the package.json\n  const packageJsonPath = getRootPackageJsonPath(projectRoot, {});\n  const pkg = JsonFile.read(packageJsonPath);\n\n  const configPath = options.configPath || customConfigPaths[projectRoot];\n\n  // If the app.json exists, we'll read it and pass it to the app.config.js for further modification\n  const { configPath: appJsonConfigPath } = findConfigFile(projectRoot);\n  let rawConfig: JSONObject = {};\n  try {\n    rawConfig = JsonFile.read(appJsonConfigPath, { json5: true });\n    if (typeof rawConfig.expo === 'object') {\n      rawConfig = rawConfig.expo as JSONObject;\n    }\n  } catch (err) {\n    if (\n      options.strict &&\n      err.code !== 'ENOENT' // File not found. This is OK, because app.json is optional.\n    ) {\n      throw err;\n    }\n  }\n\n  const { exp: configFromPkg } = ensureConfigHasDefaultValues(projectRoot, rawConfig, pkg, true);\n\n  return {\n    pkg,\n    context: {\n      projectRoot,\n      configPath,\n      config: configFromPkg,\n    },\n  };\n}\n\n/**\n * Evaluate the config for an Expo project.\n * If a function is exported from the `app.config.js` then a partial config will be passed as an argument.\n * The partial config is composed from any existing app.json, and certain fields from the `package.json` like name and description.\n *\n *\n * **Example**\n * ```js\n * module.exports = function({ config }) {\n *   // mutate the config before returning it.\n *   config.slug = 'new slug'\n *   return config;\n * }\n *\n * **Supports**\n * - `app.config.js`\n * - `app.config.json`\n * - `app.json`\n *\n * @param projectRoot the root folder containing all of your application code\n * @param options enforce criteria for a project config\n */\nexport function getConfig(projectRoot: string, options: GetConfigOptions = {}): ProjectConfig {\n  const { context, pkg } = getConfigContext(projectRoot, options);\n\n  const config = findAndEvalConfig(context) ?? context.config;\n\n  return {\n    ...ensureConfigHasDefaultValues(projectRoot, config, pkg, options.skipSDKVersionRequirement),\n    rootConfig: config as AppJSONConfig,\n  };\n}\n\nexport function getPackageJson(projectRoot: string): PackageJSONConfig {\n  // TODO(Bacon): This doesn't support changing the location of the package.json\n  const packageJsonPath = getRootPackageJsonPath(projectRoot, {});\n  return JsonFile.read(packageJsonPath);\n}\n\nexport function readConfigJson(\n  projectRoot: string,\n  skipValidation: boolean = false,\n  skipNativeValidation: boolean = false\n): ProjectConfig {\n  const { configPath } = findConfigFile(projectRoot);\n  let rawConfig: JSONObject | null = null;\n  try {\n    rawConfig = JsonFile.read(configPath, { json5: true });\n  } catch (_) {}\n  const { rootConfig, exp } = parseAndValidateRootConfig(rawConfig, skipValidation, projectRoot);\n  const packageJsonPath = getRootPackageJsonPath(projectRoot, exp);\n  const pkg = JsonFile.read(packageJsonPath);\n\n  return {\n    ...ensureConfigHasDefaultValues(projectRoot, exp, pkg, skipNativeValidation),\n    rootConfig: rootConfig as AppJSONConfig,\n  };\n}\n\nexport async function readConfigJsonAsync(\n  projectRoot: string,\n  skipValidation: boolean = false,\n  skipNativeValidation: boolean = false\n): Promise<ProjectConfig> {\n  const { configPath } = findConfigFile(projectRoot);\n  let rawConfig: JSONObject | null = null;\n  try {\n    rawConfig = await JsonFile.readAsync(configPath, { json5: true });\n  } catch (_) {}\n  const { rootConfig, exp } = parseAndValidateRootConfig(rawConfig, skipValidation, projectRoot);\n  const packageJsonPath = getRootPackageJsonPath(projectRoot, exp);\n  const pkg = await JsonFile.readAsync(packageJsonPath);\n\n  return {\n    ...ensureConfigHasDefaultValues(projectRoot, exp, pkg, skipNativeValidation),\n    rootConfig: rootConfig as AppJSONConfig,\n  };\n}\n\nexport function findConfigFile(\n  projectRoot: string\n): { configPath: string; configName: string; configNamespace: 'expo' } {\n  const APP_JSON_FILE_NAME = 'app.json';\n\n  let configPath;\n  if (customConfigPaths[projectRoot]) {\n    configPath = customConfigPaths[projectRoot];\n  } else {\n    configPath = path.join(projectRoot, APP_JSON_FILE_NAME);\n  }\n  return { configPath, configName: APP_JSON_FILE_NAME, configNamespace: 'expo' };\n}\n\nexport function configFilename(projectRoot: string): string {\n  return findConfigFile(projectRoot).configName;\n}\n\nexport async function readExpRcAsync(projectRoot: string): Promise<ExpRc> {\n  const expRcPath = path.join(projectRoot, '.exprc');\n  return await JsonFile.readAsync(expRcPath, { json5: true, cantReadFileDefault: {} });\n}\n\nconst customConfigPaths: { [projectRoot: string]: string } = {};\n\nexport function setCustomConfigPath(projectRoot: string, configPath: string): void {\n  customConfigPaths[projectRoot] = configPath;\n}\n\nconst APP_JSON_EXAMPLE = JSON.stringify({\n  expo: {\n    name: 'My app',\n    slug: 'my-app',\n    sdkVersion: '...',\n  },\n});\n\nfunction parseAndValidateRootConfig(\n  rootConfig: JSONObject | null,\n  skipValidation: boolean,\n  projectRoot: string\n): { exp: ExpoConfig; rootConfig: JSONObject } {\n  let outputRootConfig: JSONObject | null = rootConfig;\n  if (outputRootConfig === null || typeof outputRootConfig !== 'object') {\n    if (skipValidation) {\n      outputRootConfig = { expo: {} };\n    } else {\n      throw new ConfigError(\n        `Project at path ${path.resolve(projectRoot)} does not contain a valid app.json.`,\n        'NOT_OBJECT'\n      );\n    }\n  }\n  const exp = outputRootConfig.expo as ExpoConfig;\n  if (exp === null || typeof exp !== 'object') {\n    throw new ConfigError(\n      `Property 'expo' in app.json for project at path ${path.resolve(\n        projectRoot\n      )} is not an object. Please make sure app.json includes a managed Expo app config like this: ${APP_JSON_EXAMPLE}`,\n      'NO_EXPO'\n    );\n  }\n  return {\n    exp: { ...exp },\n    rootConfig: { ...outputRootConfig },\n  };\n}\n\nfunction ensureConfigHasDefaultValues(\n  projectRoot: string,\n  exp: ExpoConfig,\n  pkg: JSONObject,\n  skipSDKVersionRequirement: boolean = false\n): { exp: ExpoConfig; pkg: PackageJSONConfig } {\n  if (!exp) exp = {};\n\n  if (!exp.name && typeof pkg.name === 'string') {\n    exp.name = pkg.name;\n  }\n\n  if (!exp.description && typeof pkg.description === 'string') {\n    exp.description = pkg.description;\n  }\n\n  if (!exp.slug && typeof exp.name === 'string') {\n    exp.slug = slug(exp.name.toLowerCase());\n  }\n\n  if (!exp.version && typeof pkg.version === 'string') {\n    exp.version = pkg.version;\n  }\n\n  if (exp.nodeModulesPath) {\n    exp.nodeModulesPath = path.resolve(projectRoot, exp.nodeModulesPath);\n  }\n\n  try {\n    exp.sdkVersion = getExpoSDKVersion(projectRoot, exp);\n  } catch (error) {\n    if (!skipSDKVersionRequirement) throw error;\n  }\n\n  if (!exp.platforms) {\n    exp.platforms = getSupportedPlatforms(projectRoot, exp);\n  }\n\n  return { exp, pkg };\n}\n\nexport async function writeConfigJsonAsync(\n  projectRoot: string,\n  options: Object\n): Promise<ProjectConfig> {\n  const { configPath } = findConfigFile(projectRoot);\n  let { exp, pkg, rootConfig } = await readConfigJsonAsync(projectRoot);\n  exp = { ...rootConfig.expo, ...options };\n  rootConfig = { ...rootConfig, expo: exp };\n\n  await JsonFile.writeAsync(configPath, rootConfig, { json5: false });\n\n  return {\n    exp,\n    pkg,\n    rootConfig,\n  };\n}\n\nconst DEFAULT_BUILD_PATH = `web-build`;\n\nexport function getWebOutputPath(config: { [key: string]: any } = {}): string {\n  if (process.env.WEBPACK_BUILD_OUTPUT_PATH) {\n    return process.env.WEBPACK_BUILD_OUTPUT_PATH;\n  }\n  const expo = config.expo || config || {};\n  return expo?.web?.build?.output || DEFAULT_BUILD_PATH;\n}\n\nexport function getNameFromConfig(exp: ExpoConfig = {}): { appName: string; webName: string } {\n  // For RN CLI support\n  const appManifest = exp.expo || exp;\n  const { web = {} } = appManifest;\n\n  // rn-cli apps use a displayName value as well.\n  const appName = exp.displayName || appManifest.displayName || appManifest.name;\n  const webName = web.name || appName;\n\n  return {\n    appName,\n    webName,\n  };\n}\n"]}