{"version":3,"sources":["useLinking.native.tsx"],"names":["isUsingLinking","useLinking","ref","prefixes","config","getStateFromPath","getStateFromPathDefault","React","useEffect","Error","Platform","OS","prefixesRef","useRef","configRef","getStateFromPathRef","current","extractPathFromURL","useCallback","url","prefix","startsWith","replace","undefined","getInitialState","Linking","getInitialURL","path","listener","navigation","state","action","dispatch","resetRoot","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Linking, Platform } from 'react-native';\nimport {\n  getActionFromState,\n  getStateFromPath as getStateFromPathDefault,\n  NavigationContainerRef,\n} from '@react-navigation/core';\nimport { LinkingOptions } from './types';\n\nlet isUsingLinking = false;\n\nexport default function useLinking(\n  ref: React.RefObject<NavigationContainerRef>,\n  {\n    prefixes,\n    config,\n    getStateFromPath = getStateFromPathDefault,\n  }: LinkingOptions\n) {\n  React.useEffect(() => {\n    if (isUsingLinking) {\n      throw new Error(\n        \"Looks like you are using 'useLinking' in multiple components. This is likely an error since deep links should only be handled in one place to avoid conflicts.\" +\n          (Platform.OS === 'android'\n            ? \"\\n\\nIf you're not using it in multiple components, ensure that you have set 'android:launchMode=singleTask' in the '<activity />' section of the 'AndroidManifest.xml' file to avoid launching multiple activities which run multiple instances of the root component.\"\n            : '')\n      );\n    } else {\n      isUsingLinking = true;\n    }\n\n    return () => {\n      isUsingLinking = false;\n    };\n  });\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const prefixesRef = React.useRef(prefixes);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n\n  React.useEffect(() => {\n    prefixesRef.current = prefixes;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n  }, [config, getStateFromPath, prefixes]);\n\n  const extractPathFromURL = React.useCallback((url: string) => {\n    for (const prefix of prefixesRef.current) {\n      if (url.startsWith(prefix)) {\n        return url.replace(prefix, '');\n      }\n    }\n\n    return undefined;\n  }, []);\n\n  const getInitialState = React.useCallback(async () => {\n    const url = await Linking.getInitialURL();\n    const path = url ? extractPathFromURL(url) : null;\n\n    if (path) {\n      return getStateFromPathRef.current(path, configRef.current);\n    } else {\n      return undefined;\n    }\n  }, [extractPathFromURL]);\n\n  React.useEffect(() => {\n    const listener = ({ url }: { url: string }) => {\n      const path = extractPathFromURL(url);\n      const navigation = ref.current;\n\n      if (navigation && path) {\n        const state = getStateFromPathRef.current(path, configRef.current);\n\n        if (state) {\n          const action = getActionFromState(state);\n\n          if (action !== undefined) {\n            navigation.dispatch(action);\n          } else {\n            navigation.resetRoot(state);\n          }\n        }\n      }\n    };\n\n    Linking.addEventListener('url', listener);\n\n    return () => Linking.removeEventListener('url', listener);\n  }, [extractPathFromURL, ref]);\n\n  return {\n    getInitialState,\n  };\n}\n"]}