{"version":3,"sources":["TabRouter.tsx"],"names":["nanoid","BaseRouter","TYPE_ROUTE","TabActions","jumpTo","name","params","type","payload","getRouteHistory","routes","index","backBehavior","history","key","unshift","i","changeIndex","state","currentKey","filter","it","concat","TabRouter","initialRouteName","router","getInitialState","routeNames","routeParamList","undefined","includes","indexOf","map","stale","getRehydratedState","partialState","route","find","r","Math","min","max","length","getStateForRouteNamesChange","getStateForRouteFocus","findIndex","getStateForAction","action","previousKey","slice","shouldActionChangeFocus","actionCreators"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from './BaseRouter';\nimport {\n  NavigationState,\n  PartialState,\n  CommonNavigationAction,\n  Router,\n  DefaultRouterOptions,\n  Route,\n  ParamListBase,\n} from './types';\n\nexport type TabActionType = {\n  type: 'JUMP_TO';\n  payload: { name: string; params?: object };\n  source?: string;\n  target?: string;\n};\n\nexport type BackBehavior = 'initialRoute' | 'order' | 'history' | 'none';\n\nexport type TabRouterOptions = DefaultRouterOptions & {\n  backBehavior?: BackBehavior;\n};\n\nexport type TabNavigationState = Omit<NavigationState, 'history'> & {\n  /**\n   * Type of the router, in this case, it's tab.\n   */\n  type: 'tab';\n  /**\n   * List of previously visited route keys.\n   */\n  history: { type: 'route'; key: string }[];\n};\n\nexport type TabActionHelpers<ParamList extends ParamListBase> = {\n  /**\n   * Jump to an existing tab.\n   *\n   * @param name Name of the route for the tab.\n   * @param [params] Params object for the route.\n   */\n  jumpTo<RouteName extends Extract<keyof ParamList, string>>(\n    ...args: ParamList[RouteName] extends undefined | any\n      ? [RouteName] | [RouteName, ParamList[RouteName]]\n      : [RouteName, ParamList[RouteName]]\n  ): void;\n};\n\nconst TYPE_ROUTE = 'route' as const;\n\nexport const TabActions = {\n  jumpTo(name: string, params?: object): TabActionType {\n    return { type: 'JUMP_TO', payload: { name, params } };\n  },\n};\n\nconst getRouteHistory = (\n  routes: Route<string>[],\n  index: number,\n  backBehavior: BackBehavior\n) => {\n  const history = [{ type: TYPE_ROUTE, key: routes[index].key }];\n\n  switch (backBehavior) {\n    case 'initialRoute':\n      if (index !== 0) {\n        history.unshift({ type: TYPE_ROUTE, key: routes[0].key });\n      }\n      break;\n    case 'order':\n      for (let i = index; i > 0; i--) {\n        history.unshift({ type: TYPE_ROUTE, key: routes[i - 1].key });\n      }\n      break;\n    case 'history':\n      // The history will fill up on navigation\n      break;\n  }\n\n  return history;\n};\n\nconst changeIndex = (\n  state: TabNavigationState,\n  index: number,\n  backBehavior: BackBehavior\n) => {\n  let history;\n\n  if (backBehavior === 'history') {\n    const currentKey = state.routes[index].key;\n\n    history = state.history\n      .filter((it) => (it.type === 'route' ? it.key !== currentKey : false))\n      .concat({ type: TYPE_ROUTE, key: currentKey });\n  } else {\n    history = getRouteHistory(state.routes, index, backBehavior);\n  }\n\n  return {\n    ...state,\n    index,\n    history,\n  };\n};\n\nexport default function TabRouter({\n  initialRouteName,\n  backBehavior = 'history',\n}: TabRouterOptions) {\n  const router: Router<\n    TabNavigationState,\n    TabActionType | CommonNavigationAction\n  > = {\n    ...BaseRouter,\n\n    type: 'tab',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const index =\n        initialRouteName !== undefined && routeNames.includes(initialRouteName)\n          ? routeNames.indexOf(initialRouteName)\n          : 0;\n\n      const routes = routeNames.map((name) => ({\n        name,\n        key: `${name}-${nanoid()}`,\n        params: routeParamList[name],\n      }));\n\n      const history = getRouteHistory(routes, index, backBehavior);\n\n      return {\n        stale: false,\n        type: 'tab',\n        key: `tab-${nanoid()}`,\n        index,\n        routeNames,\n        history,\n        routes,\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = routeNames.map((name) => {\n        const route = (state as PartialState<TabNavigationState>).routes.find(\n          (r) => r.name === name\n        );\n\n        return {\n          ...route,\n          name,\n          key:\n            route && route.name === name && route.key\n              ? route.key\n              : `${name}-${nanoid()}`,\n          params:\n            routeParamList[name] !== undefined\n              ? {\n                  ...routeParamList[name],\n                  ...(route ? route.params : undefined),\n                }\n              : route\n              ? route.params\n              : undefined,\n        } as Route<string>;\n      });\n\n      const index = Math.min(\n        Math.max(\n          typeof state.index === 'number'\n            ? state.index\n            : routeNames.indexOf(state.routes[0].name),\n          0\n        ),\n        routes.length - 1\n      );\n\n      let history = state.history?.filter((it) =>\n        routes.find((r) => r.key === it.key)\n      );\n\n      if (!history?.length) {\n        history = getRouteHistory(routes, index, backBehavior);\n      }\n\n      return {\n        stale: false,\n        type: 'tab',\n        key: `tab-${nanoid()}`,\n        index,\n        routeNames,\n        history,\n        routes,\n      };\n    },\n\n    getStateForRouteNamesChange(state, { routeNames, routeParamList }) {\n      const routes = routeNames.map(\n        (name) =>\n          state.routes.find((r) => r.name === name) || {\n            name,\n            key: `${name}-${nanoid()}`,\n            params: routeParamList[name],\n          }\n      );\n\n      const index = Math.max(\n        0,\n        routeNames.indexOf(state.routes[state.index].name)\n      );\n\n      let history = state.history.filter((it) =>\n        routes.find((r) => r.key === it.key)\n      );\n\n      if (!history.length) {\n        history = getRouteHistory(routes, index, backBehavior);\n      }\n\n      return {\n        ...state,\n        history,\n        routeNames,\n        routes,\n        index,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex((r) => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return changeIndex(state, index, backBehavior);\n    },\n\n    getStateForAction(state, action) {\n      switch (action.type) {\n        case 'JUMP_TO':\n        case 'NAVIGATE': {\n          let index = -1;\n\n          if (action.type === 'NAVIGATE' && action.payload.key) {\n            index = state.routes.findIndex(\n              (route) => route.key === action.payload.key\n            );\n          } else {\n            index = state.routes.findIndex(\n              (route) => route.name === action.payload.name\n            );\n          }\n\n          if (index === -1) {\n            return null;\n          }\n\n          return changeIndex(\n            {\n              ...state,\n              routes:\n                action.payload.params !== undefined\n                  ? state.routes.map((route, i) =>\n                      i === index\n                        ? {\n                            ...route,\n                            params: {\n                              ...route.params,\n                              ...action.payload.params,\n                            },\n                          }\n                        : route\n                    )\n                  : state.routes,\n            },\n            index,\n            backBehavior\n          );\n        }\n\n        case 'GO_BACK': {\n          if (state.history.length === 1) {\n            return null;\n          }\n\n          const previousKey = state.history[state.history.length - 2].key;\n          const index = state.routes.findIndex(\n            (route) => route.key === previousKey\n          );\n\n          if (index === -1) {\n            return null;\n          }\n\n          return {\n            ...state,\n            history: state.history.slice(0, -1),\n            index,\n          };\n        }\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    shouldActionChangeFocus(action) {\n      return action.type === 'NAVIGATE';\n    },\n\n    actionCreators: TabActions,\n  };\n\n  return router;\n}\n"]}