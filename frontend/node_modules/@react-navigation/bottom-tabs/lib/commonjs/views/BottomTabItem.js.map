{"version":3,"sources":["BottomTabItem.tsx"],"names":["BottomTabBarItem","focused","route","label","icon","button","children","style","rest","accessibilityLabel","testID","onPress","onLongPress","horizontal","activeTintColor","customActiveTintColor","inactiveTintColor","customInactiveTintColor","activeBackgroundColor","inactiveBackgroundColor","showLabel","showIcon","allowFontScaling","labelStyle","colors","undefined","primary","text","mix","card","hex","renderLabel","color","styles","labelBeside","labelBeneath","renderIcon","activeOpacity","inactiveOpacity","iconHorizontal","iconVertical","scene","backgroundColor","accessibilityRole","accessibilityStates","tab","tabLandscape","tabPortrait","StyleSheet","create","flex","alignItems","justifyContent","flexDirection","height","textAlign","fontSize","marginBottom","marginLeft"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  View,\n  TouchableWithoutFeedback,\n  Animated,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\nimport { Route, useTheme } from '@react-navigation/native';\nimport Color from 'color';\n\nimport TabBarIcon from './TabBarIcon';\nimport { BottomTabBarButtonProps } from '../types';\n\ntype Props = {\n  /**\n   * Whether the tab is focused.\n   */\n  focused: boolean;\n  /**\n   * The route object which should be specified by the tab.\n   */\n  route: Route<string>;\n  /**\n   * The label text of the tab.\n   */\n  label:\n    | string\n    | ((props: { focused: boolean; color: string }) => React.ReactNode);\n  /**\n   * Icon to display for the tab.\n   */\n  icon?: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * The button for the tab. Uses a `TouchableWithoutFeedback` by default.\n   */\n  button?: (props: BottomTabBarButtonProps) => React.ReactNode;\n  /**\n   * The accessibility label for the tab.\n   */\n  accessibilityLabel?: string;\n  /**\n   * An unique ID for testing for the tab.\n   */\n  testID?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress: () => void;\n  /**\n   * Whether the label should be aligned with the icon horizontally.\n   */\n  horizontal: boolean;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Whether to show the label text for the tab.\n   */\n  showLabel?: boolean;\n  /**\n   * Whether to show the icon for the tab.\n   */\n  showIcon?: boolean;\n  /**\n   * Whether to allow scaling the font for the label for accessibility purposes.\n   */\n  allowFontScaling?: boolean;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n};\n\nexport default function BottomTabBarItem({\n  focused,\n  route,\n  label,\n  icon,\n  button = ({ children, style, ...rest }: BottomTabBarButtonProps) => (\n    <TouchableWithoutFeedback {...rest}>\n      <View style={style}>{children}</View>\n    </TouchableWithoutFeedback>\n  ),\n  accessibilityLabel,\n  testID,\n  onPress,\n  onLongPress,\n  horizontal,\n  activeTintColor: customActiveTintColor,\n  inactiveTintColor: customInactiveTintColor,\n  activeBackgroundColor = 'transparent',\n  inactiveBackgroundColor = 'transparent',\n  showLabel = true,\n  showIcon = true,\n  allowFontScaling,\n  labelStyle,\n  style,\n}: Props) {\n  const { colors } = useTheme();\n\n  const activeTintColor =\n    customActiveTintColor === undefined\n      ? colors.primary\n      : customActiveTintColor;\n\n  const inactiveTintColor =\n    customInactiveTintColor === undefined\n      ? Color(colors.text).mix(Color(colors.card), 0.5).hex()\n      : customInactiveTintColor;\n\n  const renderLabel = ({ focused }: { focused: boolean }) => {\n    if (showLabel === false) {\n      return null;\n    }\n\n    const color = focused ? activeTintColor : inactiveTintColor;\n\n    if (typeof label === 'string') {\n      return (\n        <Animated.Text\n          numberOfLines={1}\n          style={[\n            styles.label,\n            { color },\n            showIcon && horizontal ? styles.labelBeside : styles.labelBeneath,\n            labelStyle,\n          ]}\n          allowFontScaling={allowFontScaling}\n        >\n          {label}\n        </Animated.Text>\n      );\n    }\n\n    if (typeof label === 'string') {\n      return label;\n    }\n\n    return label({ focused, color });\n  };\n\n  const renderIcon = ({ focused }: { focused: boolean }) => {\n    if (showIcon === false || icon === undefined) {\n      return null;\n    }\n\n    const activeOpacity = focused ? 1 : 0;\n    const inactiveOpacity = focused ? 0 : 1;\n\n    return (\n      <TabBarIcon\n        route={route}\n        size={horizontal ? 17 : 24}\n        activeOpacity={activeOpacity}\n        inactiveOpacity={inactiveOpacity}\n        activeTintColor={activeTintColor}\n        inactiveTintColor={inactiveTintColor}\n        renderIcon={icon}\n        style={horizontal ? styles.iconHorizontal : styles.iconVertical}\n      />\n    );\n  };\n\n  const scene = { route, focused };\n\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  return button({\n    onPress,\n    onLongPress,\n    testID,\n    accessibilityLabel,\n    accessibilityRole: 'button',\n    accessibilityStates: focused ? ['selected'] : [],\n    style: [\n      styles.tab,\n      { backgroundColor },\n      horizontal ? styles.tabLandscape : styles.tabPortrait,\n      style,\n    ],\n    children: (\n      <React.Fragment>\n        {renderIcon(scene)}\n        {renderLabel(scene)}\n      </React.Fragment>\n    ),\n  }) as React.ReactElement;\n}\n\nconst styles = StyleSheet.create({\n  tab: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  tabPortrait: {\n    justifyContent: 'flex-end',\n    flexDirection: 'column',\n  },\n  tabLandscape: {\n    justifyContent: 'center',\n    flexDirection: 'row',\n  },\n  iconVertical: {\n    flex: 1,\n  },\n  iconHorizontal: {\n    height: '100%',\n  },\n  label: {\n    textAlign: 'center',\n    backgroundColor: 'transparent',\n  },\n  labelBeneath: {\n    fontSize: 11,\n    marginBottom: 1.5,\n  },\n  labelBeside: {\n    fontSize: 12,\n    marginLeft: 20,\n  },\n});\n"]}