{"version":3,"sources":["BottomTabView.tsx"],"names":["React","View","StyleSheet","useTheme","ScreenContainer","SafeAreaProviderCompat","ResourceSavingScene","BottomTabBar","SceneContent","isFocused","children","colors","styles","content","backgroundColor","background","BottomTabView","Component","loaded","props","state","index","tabBar","tabBarOptions","navigation","descriptors","route","routes","descriptor","key","options","tabBarVisible","getDerivedStateFromProps","nextProps","prevState","includes","render","lazy","container","pages","map","unmountOnBlur","absoluteFill","renderTabBar","create","flex","overflow"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,cAAjC;AAEA,SAA6BC,QAA7B,QAA6C,0BAA7C,C,CACA;;AACA,SAASC,eAAT,QAAgC,sBAAhC;AAEA,OAAOC,sBAAP,MAAmC,0BAAnC;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAkBA,SAASC,YAAT,CAAsB;AACpBC,EAAAA,SADoB;AAEpBC,EAAAA;AAFoB,CAAtB,EAMG;AACD,QAAM;AAAEC,IAAAA;AAAF,MAAaR,QAAQ,EAA3B;AAEA,sBACE,oBAAC,IAAD;AACE,IAAA,2BAA2B,EAAE,CAACM,SADhC;AAEE,IAAA,yBAAyB,EAAEA,SAAS,GAAG,MAAH,GAAY,qBAFlD;AAGE,IAAA,KAAK,EAAE,CAACG,MAAM,CAACC,OAAR,EAAiB;AAAEC,MAAAA,eAAe,EAAEH,MAAM,CAACI;AAA1B,KAAjB;AAHT,KAKGL,QALH,CADF;AASD;;AAED,eAAe,MAAMM,aAAN,SAA4BhB,KAAK,CAACiB,SAAlC,CAA0D;AAAA;AAAA;;AAAA,mCAgB/D;AACNC,MAAAA,MAAM,EAAE,CAAC,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,KAAlB;AADF,KAhB+D;;AAAA,0CAoBhD,MAAM;AAC3B,YAAM;AACJC,QAAAA,MAAM,GAAIH,KAAD,iBAA8B,oBAAC,YAAD,EAAkBA,KAAlB,CADnC;AAEJI,QAAAA,aAFI;AAGJH,QAAAA,KAHI;AAIJI,QAAAA;AAJI,UAKF,KAAKL,KALT;AAOA,YAAM;AAAEM,QAAAA;AAAF,UAAkB,KAAKN,KAA7B;AACA,YAAMO,KAAK,GAAGN,KAAK,CAACO,MAAN,CAAaP,KAAK,CAACC,KAAnB,CAAd;AACA,YAAMO,UAAU,GAAGH,WAAW,CAACC,KAAK,CAACG,GAAP,CAA9B;AACA,YAAMC,OAAO,GAAGF,UAAU,CAACE,OAA3B;;AAEA,UAAIA,OAAO,CAACC,aAAR,KAA0B,KAA9B,EAAqC;AACnC,eAAO,IAAP;AACD;;AAED,aAAOT,MAAM,mBACRC,aADQ;AAEXH,QAAAA,KAAK,EAAEA,KAFI;AAGXK,QAAAA,WAAW,EAAEA,WAHF;AAIXD,QAAAA,UAAU,EAAEA;AAJD,SAAb;AAMD,KA3CsE;AAAA;;AAKvE,SAAOQ,wBAAP,CAAgCC,SAAhC,EAAkDC,SAAlD,EAAoE;AAClE,UAAM;AAAEb,MAAAA;AAAF,QAAYY,SAAS,CAACb,KAA5B;AAEA,WAAO;AACL;AACAF,MAAAA,MAAM,EAAEgB,SAAS,CAAChB,MAAV,CAAiBiB,QAAjB,CAA0Bd,KAA1B,IACJa,SAAS,CAAChB,MADN,GAEJ,CAAC,GAAGgB,SAAS,CAAChB,MAAd,EAAsBG,KAAtB;AAJC,KAAP;AAMD;;AA+BDe,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEhB,MAAAA,KAAF;AAASK,MAAAA,WAAT;AAAsBY,MAAAA;AAAtB,QAA+B,KAAKlB,KAA1C;AACA,UAAM;AAAEQ,MAAAA;AAAF,QAAaP,KAAnB;AACA,UAAM;AAAEF,MAAAA;AAAF,QAAa,KAAKE,KAAxB;AAEA,wBACE,oBAAC,sBAAD,qBACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAER,MAAM,CAAC0B;AAApB,oBACE,oBAAC,eAAD;AAAiB,MAAA,KAAK,EAAE1B,MAAM,CAAC2B;AAA/B,OACGZ,MAAM,CAACa,GAAP,CAAW,CAACd,KAAD,EAAQL,KAAR,KAAkB;AAC5B,YAAMO,UAAU,GAAGH,WAAW,CAACC,KAAK,CAACG,GAAP,CAA9B;AACA,YAAM;AAAEY,QAAAA;AAAF,UAAoBb,UAAU,CAACE,OAArC;AACA,YAAMrB,SAAS,GAAGW,KAAK,CAACC,KAAN,KAAgBA,KAAlC;;AAEA,UAAIoB,aAAa,IAAI,CAAChC,SAAtB,EAAiC;AAC/B,eAAO,IAAP;AACD;;AAED,UAAI4B,IAAI,IAAI,CAACnB,MAAM,CAACiB,QAAP,CAAgBd,KAAhB,CAAT,IAAmC,CAACZ,SAAxC,EAAmD;AACjD;AACA,eAAO,IAAP;AACD;;AAED,0BACE,oBAAC,mBAAD;AACE,QAAA,GAAG,EAAEiB,KAAK,CAACG,GADb;AAEE,QAAA,KAAK,EAAE3B,UAAU,CAACwC,YAFpB;AAGE,QAAA,SAAS,EAAEjC;AAHb,sBAKE,oBAAC,YAAD;AAAc,QAAA,SAAS,EAAEA;AAAzB,SACGmB,UAAU,CAACQ,MAAX,EADH,CALF,CADF;AAWD,KAzBA,CADH,CADF,EA6BG,KAAKO,YAAL,EA7BH,CADF,CADF;AAmCD;;AArFsE;;gBAApD3B,a,kBACG;AACpBqB,EAAAA,IAAI,EAAE;AADc,C;;AAuFxB,MAAMzB,MAAM,GAAGV,UAAU,CAAC0C,MAAX,CAAkB;AAC/BN,EAAAA,SAAS,EAAE;AACTO,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,QAAQ,EAAE;AAFD,GADoB;AAK/BP,EAAAA,KAAK,EAAE;AACLM,IAAAA,IAAI,EAAE;AADD,GALwB;AAQ/BhC,EAAAA,OAAO,EAAE;AACPgC,IAAAA,IAAI,EAAE;AADC;AARsB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\n\nimport { TabNavigationState, useTheme } from '@react-navigation/native';\n// eslint-disable-next-line import/no-unresolved\nimport { ScreenContainer } from 'react-native-screens';\n\nimport SafeAreaProviderCompat from './SafeAreaProviderCompat';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport BottomTabBar from './BottomTabBar';\nimport {\n  BottomTabNavigationConfig,\n  BottomTabDescriptorMap,\n  BottomTabNavigationHelpers,\n  BottomTabBarProps,\n} from '../types';\n\ntype Props = BottomTabNavigationConfig & {\n  state: TabNavigationState;\n  navigation: BottomTabNavigationHelpers;\n  descriptors: BottomTabDescriptorMap;\n};\n\ntype State = {\n  loaded: number[];\n};\n\nfunction SceneContent({\n  isFocused,\n  children,\n}: {\n  isFocused: boolean;\n  children: React.ReactNode;\n}) {\n  const { colors } = useTheme();\n\n  return (\n    <View\n      accessibilityElementsHidden={!isFocused}\n      importantForAccessibility={isFocused ? 'auto' : 'no-hide-descendants'}\n      style={[styles.content, { backgroundColor: colors.background }]}\n    >\n      {children}\n    </View>\n  );\n}\n\nexport default class BottomTabView extends React.Component<Props, State> {\n  static defaultProps = {\n    lazy: true,\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    const { index } = nextProps.state;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(index)\n        ? prevState.loaded\n        : [...prevState.loaded, index],\n    };\n  }\n\n  state = {\n    loaded: [this.props.state.index],\n  };\n\n  private renderTabBar = () => {\n    const {\n      tabBar = (props: BottomTabBarProps) => <BottomTabBar {...props} />,\n      tabBarOptions,\n      state,\n      navigation,\n    } = this.props;\n\n    const { descriptors } = this.props;\n    const route = state.routes[state.index];\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    if (options.tabBarVisible === false) {\n      return null;\n    }\n\n    return tabBar({\n      ...tabBarOptions,\n      state: state,\n      descriptors: descriptors,\n      navigation: navigation,\n    });\n  };\n\n  render() {\n    const { state, descriptors, lazy } = this.props;\n    const { routes } = state;\n    const { loaded } = this.state;\n\n    return (\n      <SafeAreaProviderCompat>\n        <View style={styles.container}>\n          <ScreenContainer style={styles.pages}>\n            {routes.map((route, index) => {\n              const descriptor = descriptors[route.key];\n              const { unmountOnBlur } = descriptor.options;\n              const isFocused = state.index === index;\n\n              if (unmountOnBlur && !isFocused) {\n                return null;\n              }\n\n              if (lazy && !loaded.includes(index) && !isFocused) {\n                // Don't render a screen if we've never navigated to it\n                return null;\n              }\n\n              return (\n                <ResourceSavingScene\n                  key={route.key}\n                  style={StyleSheet.absoluteFill}\n                  isVisible={isFocused}\n                >\n                  <SceneContent isFocused={isFocused}>\n                    {descriptor.render()}\n                  </SceneContent>\n                </ResourceSavingScene>\n              );\n            })}\n          </ScreenContainer>\n          {this.renderTabBar()}\n        </View>\n      </SafeAreaProviderCompat>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  pages: {\n    flex: 1,\n  },\n  content: {\n    flex: 1,\n  },\n});\n"]}