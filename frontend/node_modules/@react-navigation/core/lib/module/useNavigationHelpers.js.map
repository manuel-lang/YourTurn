{"version":3,"sources":["useNavigationHelpers.tsx"],"names":["React","CommonActions","NavigationContext","PrivateValueStore","useNavigationHelpers","onAction","getState","emitter","router","parentNavigationHelpers","useContext","useMemo","dispatch","op","action","handled","process","env","NODE_ENV","payload","message","type","JSON","stringify","name","console","error","actions","actionCreators","helpers","Object","keys","reduce","acc","args","emit","isFocused","canGoBack","state","getStateForAction","goBack","routeNames","routeParamList"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  CommonActions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport NavigationContext from './NavigationContext';\nimport { NavigationEventEmitter } from './useEventEmitter';\nimport { NavigationHelpers, NavigationProp, PrivateValueStore } from './types';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype Options<State extends NavigationState, Action extends NavigationAction> = {\n  onAction: (\n    action: NavigationAction,\n    visitedNavigators?: Set<string>\n  ) => boolean;\n  getState: () => State;\n  emitter: NavigationEventEmitter;\n  router: Router<State, Action>;\n};\n\n/**\n * Navigation object with helper methods to be used by a navigator.\n * This object includes methods for common actions as well as methods the parent screen's navigation object.\n */\nexport default function useNavigationHelpers<\n  State extends NavigationState,\n  Action extends NavigationAction,\n  EventMap extends Record<string, any>\n>({ onAction, getState, emitter, router }: Options<State, Action>) {\n  const parentNavigationHelpers = React.useContext(NavigationContext);\n\n  return React.useMemo(() => {\n    const dispatch = (op: Action | ((state: State) => Action)) => {\n      const action = typeof op === 'function' ? op(getState()) : op;\n\n      const handled = onAction(action);\n\n      if (!handled && process.env.NODE_ENV !== 'production') {\n        const payload: Record<string, any> | undefined = action.payload;\n\n        let message = `The action '${action.type}'${\n          payload ? ` with payload ${JSON.stringify(action.payload)}` : ''\n        } was not handled by any navigator.`;\n\n        switch (action.type) {\n          case 'NAVIGATE':\n          case 'PUSH':\n          case 'REPLACE':\n          case 'JUMP_TO':\n            if (payload?.name) {\n              message += `\\n\\nDo you have a screen named '${payload.name}'?\\n\\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.`;\n            } else {\n              message += `\\n\\nYou need to pass the name of the screen to navigate to.\\n\\nSee https://reactnavigation.org/docs/navigation-actions for usage.`;\n            }\n\n            break;\n          case 'GO_BACK':\n          case 'POP':\n          case 'POP_TO_TOP':\n            message += `\\n\\nIs there any screen to go back to?`;\n            break;\n          case 'OPEN_DRAWER':\n          case 'CLOSE_DRAWER':\n          case 'TOGGLE_DRAWER':\n            message += `\\n\\nIs your screen inside a Drawer navigator?`;\n            break;\n        }\n\n        message += `\\n\\nThis is a development-only warning and won't be shown in production.`;\n\n        console.error(message);\n      }\n    };\n\n    const actions = {\n      ...router.actionCreators,\n      ...CommonActions,\n    };\n\n    const helpers = Object.keys(actions).reduce<Record<string, () => void>>(\n      (acc, name) => {\n        // @ts-ignore\n        acc[name] = (...args: any) => dispatch(actions[name](...args));\n        return acc;\n      },\n      {}\n    );\n\n    return {\n      ...parentNavigationHelpers,\n      ...helpers,\n      dispatch,\n      emit: emitter.emit,\n      isFocused: parentNavigationHelpers\n        ? parentNavigationHelpers.isFocused\n        : () => true,\n      canGoBack: () => {\n        const state = getState();\n\n        return (\n          router.getStateForAction(state, CommonActions.goBack() as Action, {\n            routeNames: state.routeNames,\n            routeParamList: {},\n          }) !== null ||\n          parentNavigationHelpers?.canGoBack() ||\n          false\n        );\n      },\n    } as NavigationHelpers<ParamListBase, EventMap> &\n      (NavigationProp<ParamListBase, string, any, any, any> | undefined);\n  }, [router, getState, parentNavigationHelpers, emitter.emit, onAction]);\n}\n"]}