{"version":3,"sources":["useDevTools.tsx"],"names":["React","useDevTools","name","reset","state","enabled","devToolsRef","useRef","process","env","NODE_ENV","global","__REDUX_DEVTOOLS_EXTENSION__","current","undefined","connect","devTools","lastStateRef","actions","useEffect","init","subscribe","message","type","JSON","parse","trackState","useCallback","getState","length","send","shift","pop","trackAction","action","push"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAsCA,eAAe,SAASC,WAAT,CAAqB;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA,KAAf;AAAsBC,EAAAA;AAAtB,CAArB,EAA+D;AAC5E,QAAMC,WAAW,GAAGN,KAAK,CAACO,MAAN,EAApB;;AAEA,MACEF,OAAO,IACPG,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YADzB,IAEAC,MAAM,CAACC,4BAFP,IAGAN,WAAW,CAACO,OAAZ,KAAwBC,SAJ1B,EAKE;AACAR,IAAAA,WAAW,CAACO,OAAZ,GAAsBF,MAAM,CAACC,4BAAP,CAAoCG,OAApC,CAA4C;AAAEb,MAAAA;AAAF,KAA5C,CAAtB;AACD;;AAED,QAAMc,QAAQ,GAAGV,WAAW,CAACO,OAA7B;AACA,QAAMI,YAAY,GAAGjB,KAAK,CAACO,MAAN,CAAoBH,KAApB,CAArB;AACA,QAAMc,OAAO,GAAGlB,KAAK,CAACO,MAAN,CAA4C,EAA5C,CAAhB;AAEAP,EAAAA,KAAK,CAACmB,SAAN,CAAgB,MAAM;AACpBH,IAAAA,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEI,IAAV,CAAeH,YAAY,CAACJ,OAA5B;AACD,GAFD,EAEG,CAACG,QAAD,CAFH;AAIAhB,EAAAA,KAAK,CAACmB,SAAN,CACE,MACEH,QADF,aACEA,QADF,uBACEA,QAAQ,CAAEK,SAAV,CAAqBC,OAAD,IAAa;AAC/B,QAAIA,OAAO,CAACC,IAAR,KAAiB,UAAjB,IAA+BD,OAAO,CAAClB,KAA3C,EAAkD;AAChDD,MAAAA,KAAK,CAACqB,IAAI,CAACC,KAAL,CAAWH,OAAO,CAAClB,KAAnB,CAAD,CAAL;AACD;AACF,GAJD,CAFJ,EAOE,CAACY,QAAD,EAAWb,KAAX,CAPF;AAUA,QAAMuB,UAAU,GAAG1B,KAAK,CAAC2B,WAAN,CAChBC,QAAD,IAA2B;AACzB,QAAI,CAACZ,QAAL,EAAe;AACb;AACD;;AAED,WAAOE,OAAO,CAACL,OAAR,CAAgBgB,MAAhB,GAAyB,CAAhC,EAAmC;AACjCb,MAAAA,QAAQ,CAACc,IAAT,CAAcZ,OAAO,CAACL,OAAR,CAAgBkB,KAAhB,EAAd,EAAuCd,YAAY,CAACJ,OAApD;AACD;;AAED,UAAMT,KAAK,GAAGwB,QAAQ,EAAtB;;AAEA,QAAIV,OAAO,CAACL,OAAR,CAAgBgB,MAApB,EAA4B;AAC1Bb,MAAAA,QAAQ,CAACc,IAAT,CAAcZ,OAAO,CAACL,OAAR,CAAgBmB,GAAhB,EAAd,EAAqC5B,KAArC;AACD,KAFD,MAEO;AACLY,MAAAA,QAAQ,CAACc,IAAT,CAAc,WAAd,EAA2B1B,KAA3B;AACD;;AAEDa,IAAAA,YAAY,CAACJ,OAAb,GAAuBT,KAAvB;AACD,GAnBgB,EAoBjB,CAACY,QAAD,CApBiB,CAAnB;AAuBA,QAAMiB,WAAW,GAAGjC,KAAK,CAAC2B,WAAN,CACjBO,MAAD,IAAuC;AACrC,QAAI,CAAClB,QAAL,EAAe;AACb;AACD;;AAEDE,IAAAA,OAAO,CAACL,OAAR,CAAgBsB,IAAhB,CAAqBD,MAArB;AACD,GAPiB,EAQlB,CAAClB,QAAD,CARkB,CAApB;AAWA,SAAO;AACLiB,IAAAA,WADK;AAELP,IAAAA;AAFK,GAAP;AAID","sourcesContent":["import * as React from 'react';\nimport {\n  NavigationState,\n  NavigationAction,\n  PartialState,\n} from '@react-navigation/routers';\n\ntype State = NavigationState | PartialState<NavigationState> | undefined;\n\ntype Options = {\n  enabled: boolean;\n  name: string;\n  reset: (state: NavigationState) => void;\n  state: State;\n};\n\ntype DevTools = {\n  init(value: any): void;\n  send(action: any, value: any): void;\n  subscribe(\n    listener: (message: { type: string; [key: string]: any }) => void\n  ): () => void;\n};\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace NodeJS {\n    interface Global {\n      __REDUX_DEVTOOLS_EXTENSION__:\n        | {\n            connect(options: { name: string }): DevTools;\n            disconnect(): void;\n          }\n        | undefined;\n    }\n  }\n}\n\nexport default function useDevTools({ name, reset, state, enabled }: Options) {\n  const devToolsRef = React.useRef<DevTools>();\n\n  if (\n    enabled &&\n    process.env.NODE_ENV !== 'production' &&\n    global.__REDUX_DEVTOOLS_EXTENSION__ &&\n    devToolsRef.current === undefined\n  ) {\n    devToolsRef.current = global.__REDUX_DEVTOOLS_EXTENSION__.connect({ name });\n  }\n\n  const devTools = devToolsRef.current;\n  const lastStateRef = React.useRef<State>(state);\n  const actions = React.useRef<(NavigationAction | string)[]>([]);\n\n  React.useEffect(() => {\n    devTools?.init(lastStateRef.current);\n  }, [devTools]);\n\n  React.useEffect(\n    () =>\n      devTools?.subscribe((message) => {\n        if (message.type === 'DISPATCH' && message.state) {\n          reset(JSON.parse(message.state));\n        }\n      }),\n    [devTools, reset]\n  );\n\n  const trackState = React.useCallback(\n    (getState: () => State) => {\n      if (!devTools) {\n        return;\n      }\n\n      while (actions.current.length > 1) {\n        devTools.send(actions.current.shift(), lastStateRef.current);\n      }\n\n      const state = getState();\n\n      if (actions.current.length) {\n        devTools.send(actions.current.pop(), state);\n      } else {\n        devTools.send('@@UNKNOWN', state);\n      }\n\n      lastStateRef.current = state;\n    },\n    [devTools]\n  );\n\n  const trackAction = React.useCallback(\n    (action: NavigationAction | string) => {\n      if (!devTools) {\n        return;\n      }\n\n      actions.current.push(action);\n    },\n    [devTools]\n  );\n\n  return {\n    trackAction,\n    trackState,\n  };\n}\n"]}