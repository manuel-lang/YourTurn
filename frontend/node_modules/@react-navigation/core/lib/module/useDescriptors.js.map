{"version":3,"sources":["useDescriptors.tsx"],"names":["React","SceneView","NavigationBuilderContext","useNavigationCache","useDescriptors","state","screens","navigation","screenOptions","onAction","getState","setState","addActionListener","addFocusedListener","addStateGetter","onRouteFocus","router","emitter","options","setOptions","useState","trackAction","useContext","context","useMemo","navigations","routes","reduce","acc","route","screen","name","key","render"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAOA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,wBAAP,MAIO,4BAJP;AAMA,OAAOC,kBAAP,MAA+B,sBAA/B;;AAwCA;;;;;;;;AAQA,eAAe,SAASC,cAAT,CAIb;AACAC,EAAAA,KADA;AAEAC,EAAAA,OAFA;AAGAC,EAAAA,UAHA;AAIAC,EAAAA,aAJA;AAKAC,EAAAA,QALA;AAMAC,EAAAA,QANA;AAOAC,EAAAA,QAPA;AAQAC,EAAAA,iBARA;AASAC,EAAAA,kBATA;AAUAC,EAAAA,cAVA;AAWAC,EAAAA,YAXA;AAYAC,EAAAA,MAZA;AAaAC,EAAAA;AAbA,CAJa,EAkB6B;AAC1C,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBnB,KAAK,CAACoB,QAAN,CAAuC,EAAvC,CAA9B;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAkBrB,KAAK,CAACsB,UAAN,CAAiBpB,wBAAjB,CAAxB;AAEA,QAAMqB,OAAO,GAAGvB,KAAK,CAACwB,OAAN,CACd,OAAO;AACLjB,IAAAA,UADK;AAELE,IAAAA,QAFK;AAGLG,IAAAA,iBAHK;AAILC,IAAAA,kBAJK;AAKLC,IAAAA,cALK;AAMLC,IAAAA,YANK;AAOLM,IAAAA;AAPK,GAAP,CADc,EAUd,CACEd,UADF,EAEEE,QAFF,EAGEG,iBAHF,EAIEC,kBAJF,EAKEE,YALF,EAMED,cANF,EAOEO,WAPF,CAVc,CAAhB;AAqBA,QAAMI,WAAW,GAAGtB,kBAAkB,CAAuB;AAC3DE,IAAAA,KAD2D;AAE3DK,IAAAA,QAF2D;AAG3DH,IAAAA,UAH2D;AAI3DY,IAAAA,UAJ2D;AAK3DH,IAAAA,MAL2D;AAM3DC,IAAAA;AAN2D,GAAvB,CAAtC;AASA,SAAOZ,KAAK,CAACqB,MAAN,CAAaC,MAAb,CACL,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACd,UAAMC,MAAM,GAAGxB,OAAO,CAACuB,KAAK,CAACE,IAAP,CAAtB;AACA,UAAMxB,UAAU,GAAGkB,WAAW,CAACI,KAAK,CAACG,GAAP,CAA9B;AAEAJ,IAAAA,GAAG,CAACC,KAAK,CAACG,GAAP,CAAH,GAAiB;AACfzB,MAAAA,UADe;;AAEf0B,MAAAA,MAAM,GAAG;AACP,4BACE,oBAAC,wBAAD,CAA0B,QAA1B;AAAmC,UAAA,GAAG,EAAEJ,KAAK,CAACG,GAA9C;AAAmD,UAAA,KAAK,EAAET;AAA1D,wBACE,oBAAC,SAAD;AACE,UAAA,UAAU,EAAEhB,UADd;AAEE,UAAA,KAAK,EAAEsB,KAFT;AAGE,UAAA,MAAM,EAAEC,MAHV;AAIE,UAAA,QAAQ,EAAEpB,QAJZ;AAKE,UAAA,QAAQ,EAAEC;AALZ,UADF,CADF;AAWD,OAdc;;AAefO,MAAAA,OAAO,oBAED,OAAOV,aAAP,KAAyB,QAAzB,IAAqCA,aAAa,IAAI,IAAtD,GACAA,aADA,GAEAA,aAAa,CAAC;AACZ;AACAqB,QAAAA,KAFY;AAGZtB,QAAAA;AAHY,OAAD,CAJZ,MAUD,OAAOuB,MAAM,CAACZ,OAAd,KAA0B,QAA1B,IAAsCY,MAAM,CAACZ,OAAP,IAAkB,IAAxD,GACAY,MAAM,CAACZ,OADP,GAEAY,MAAM,CAACZ,OAAP,CAAe;AACb;AACAW,QAAAA,KAFa;AAGb;AACAtB,QAAAA;AAJa,OAAf,CAZC,MAmBFW,OAAO,CAACW,KAAK,CAACG,GAAP,CAnBL;AAfQ,KAAjB;AAsCA,WAAOJ,GAAP;AACD,GA5CI,EA6CL,EA7CK,CAAP;AAiDD","sourcesContent":["import * as React from 'react';\nimport {\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport SceneView from './SceneView';\nimport NavigationBuilderContext, {\n  ChildActionListener,\n  FocusedNavigationListener,\n  NavigatorStateGetter,\n} from './NavigationBuilderContext';\nimport { NavigationEventEmitter } from './useEventEmitter';\nimport useNavigationCache from './useNavigationCache';\nimport {\n  Descriptor,\n  NavigationHelpers,\n  RouteConfig,\n  RouteProp,\n  EventMapBase,\n} from './types';\n\ntype Options<\n  State extends NavigationState,\n  ScreenOptions extends object,\n  EventMap extends EventMapBase\n> = {\n  state: State;\n  screens: Record<\n    string,\n    RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>\n  >;\n  navigation: NavigationHelpers<ParamListBase>;\n  screenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase, string>;\n        navigation: any;\n      }) => ScreenOptions);\n  onAction: (\n    action: NavigationAction,\n    visitedNavigators?: Set<string>\n  ) => boolean;\n  getState: () => State;\n  setState: (state: State) => void;\n  addActionListener: (listener: ChildActionListener) => void;\n  addFocusedListener: (listener: FocusedNavigationListener) => void;\n  addStateGetter: (key: string, getter: NavigatorStateGetter) => void;\n  onRouteFocus: (key: string) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter;\n};\n\n/**\n * Hook to create descriptor objects for the child routes.\n *\n * A descriptor object provides 3 things:\n * - Helper method to render a screen\n * - Options specified by the screen for the navigator\n * - Navigation object intended for the route\n */\nexport default function useDescriptors<\n  State extends NavigationState,\n  ScreenOptions extends object,\n  EventMap extends EventMapBase\n>({\n  state,\n  screens,\n  navigation,\n  screenOptions,\n  onAction,\n  getState,\n  setState,\n  addActionListener,\n  addFocusedListener,\n  addStateGetter,\n  onRouteFocus,\n  router,\n  emitter,\n}: Options<State, ScreenOptions, EventMap>) {\n  const [options, setOptions] = React.useState<Record<string, object>>({});\n  const { trackAction } = React.useContext(NavigationBuilderContext);\n\n  const context = React.useMemo(\n    () => ({\n      navigation,\n      onAction,\n      addActionListener,\n      addFocusedListener,\n      addStateGetter,\n      onRouteFocus,\n      trackAction,\n    }),\n    [\n      navigation,\n      onAction,\n      addActionListener,\n      addFocusedListener,\n      onRouteFocus,\n      addStateGetter,\n      trackAction,\n    ]\n  );\n\n  const navigations = useNavigationCache<State, ScreenOptions>({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter,\n  });\n\n  return state.routes.reduce(\n    (acc, route) => {\n      const screen = screens[route.name];\n      const navigation = navigations[route.key];\n\n      acc[route.key] = {\n        navigation,\n        render() {\n          return (\n            <NavigationBuilderContext.Provider key={route.key} value={context}>\n              <SceneView\n                navigation={navigation}\n                route={route}\n                screen={screen}\n                getState={getState}\n                setState={setState}\n              />\n            </NavigationBuilderContext.Provider>\n          );\n        },\n        options: {\n          // The default `screenOptions` passed to the navigator\n          ...(typeof screenOptions === 'object' || screenOptions == null\n            ? screenOptions\n            : screenOptions({\n                // @ts-ignore\n                route,\n                navigation,\n              })),\n          // The `options` prop passed to `Screen` elements\n          ...(typeof screen.options === 'object' || screen.options == null\n            ? screen.options\n            : screen.options({\n                // @ts-ignore\n                route,\n                // @ts-ignore\n                navigation,\n              })),\n          // The options set via `navigation.setOptions`\n          ...options[route.key],\n        },\n      };\n\n      return acc;\n    },\n    {} as {\n      [key: string]: Descriptor<ParamListBase, string, State, ScreenOptions>;\n    }\n  );\n}\n"]}