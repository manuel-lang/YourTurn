{"version":3,"sources":["useOnAction.tsx"],"names":["useOnAction","router","getState","setState","key","listeners","routerConfigOptions","onAction","onActionParent","onRouteFocus","onRouteFocusParent","addActionListener","addActionListenerParent","trackAction","React","useContext","NavigationBuilderContext","routerConfigOptionsRef","useRef","useEffect","current","useCallback","action","visitedNavigators","Set","state","has","add","target","result","getStateForAction","undefined","shouldFocus","shouldActionChangeFocus","i","length","listener"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  NavigationAction,\n  NavigationState,\n  PartialState,\n  Router,\n  RouterConfigOptions,\n} from '@react-navigation/routers';\nimport NavigationBuilderContext, {\n  ChildActionListener,\n} from './NavigationBuilderContext';\n\ntype Options = {\n  router: Router<NavigationState, NavigationAction>;\n  key?: string;\n  getState: () => NavigationState;\n  setState: (state: NavigationState | PartialState<NavigationState>) => void;\n  listeners: ChildActionListener[];\n  routerConfigOptions: RouterConfigOptions;\n};\n\n/**\n * Hook to handle actions for a navigator, including state updates and bubbling.\n *\n * Bubbling an action is achieved in 2 ways:\n * 1. To bubble action to parent, we expose the action handler in context and then access the parent context\n * 2. To bubble action to child, child adds event listeners subscribing to actions from parent\n *\n * When the action handler handles as action, it returns `true`, otherwise `false`.\n */\nexport default function useOnAction({\n  router,\n  getState,\n  setState,\n  key,\n  listeners,\n  routerConfigOptions,\n}: Options) {\n  const {\n    onAction: onActionParent,\n    onRouteFocus: onRouteFocusParent,\n    addActionListener: addActionListenerParent,\n    trackAction,\n  } = React.useContext(NavigationBuilderContext);\n\n  const routerConfigOptionsRef = React.useRef<RouterConfigOptions>(\n    routerConfigOptions\n  );\n\n  React.useEffect(() => {\n    routerConfigOptionsRef.current = routerConfigOptions;\n  });\n\n  const onAction = React.useCallback(\n    (\n      action: NavigationAction,\n      visitedNavigators: Set<string> = new Set<string>()\n    ) => {\n      const state = getState();\n\n      // Since actions can bubble both up and down, they could come to the same navigator again\n      // We keep track of navigators which have already tried to handle the action and return if it's already visited\n      if (visitedNavigators.has(state.key)) {\n        return false;\n      }\n\n      visitedNavigators.add(state.key);\n\n      if (typeof action.target === 'string' && action.target !== state.key) {\n        return false;\n      }\n\n      let result = router.getStateForAction(\n        state,\n        action,\n        routerConfigOptionsRef.current\n      );\n\n      // If a target is specified and set to current navigator, the action shouldn't bubble\n      // So instead of `null`, we use the state object for such cases to signal that action was handled\n      result = result === null && action.target === state.key ? state : result;\n\n      if (result !== null) {\n        trackAction(action);\n\n        if (state !== result) {\n          setState(result);\n        }\n\n        if (onRouteFocusParent !== undefined) {\n          // Some actions such as `NAVIGATE` also want to bring the navigated route to focus in the whole tree\n          // This means we need to focus all of the parent navigators of this navigator as well\n          const shouldFocus = router.shouldActionChangeFocus(action);\n\n          if (shouldFocus && key !== undefined) {\n            onRouteFocusParent(key);\n          }\n        }\n\n        return true;\n      }\n\n      if (onActionParent !== undefined) {\n        // Bubble action to the parent if the current navigator didn't handle it\n        if (onActionParent(action, visitedNavigators)) {\n          return true;\n        }\n      }\n\n      // If the action wasn't handled by current navigator or a parent navigator, let children handle it\n      for (let i = listeners.length - 1; i >= 0; i--) {\n        const listener = listeners[i];\n\n        if (listener(action, visitedNavigators)) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    [\n      getState,\n      router,\n      onActionParent,\n      trackAction,\n      onRouteFocusParent,\n      setState,\n      key,\n      listeners,\n    ]\n  );\n\n  React.useEffect(() => addActionListenerParent?.(onAction), [\n    addActionListenerParent,\n    onAction,\n  ]);\n\n  return onAction;\n}\n"]}