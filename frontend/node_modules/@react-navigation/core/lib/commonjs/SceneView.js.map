{"version":3,"sources":["SceneView.tsx"],"names":["SceneView","screen","route","navigation","getState","setState","navigatorKeyRef","React","useRef","getKey","useCallback","current","setKey","key","getCurrentState","state","currentRoute","routes","find","r","undefined","setCurrentState","child","map","context","useMemo","name","component","children"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Route,\n  ParamListBase,\n  NavigationState,\n  PartialState,\n} from '@react-navigation/routers';\nimport { NavigationStateContext } from './BaseNavigationContainer';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport StaticContainer from './StaticContainer';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport { NavigationProp, RouteConfig, EventMapBase } from './types';\n\ntype Props<\n  State extends NavigationState,\n  ScreenOptions extends object,\n  EventMap extends EventMapBase\n> = {\n  screen: RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>;\n  navigation: NavigationProp<ParamListBase, string, State, ScreenOptions>;\n  route: Route<string> & {\n    state?: NavigationState | PartialState<NavigationState>;\n  };\n  getState: () => State;\n  setState: (state: State) => void;\n};\n\n/**\n * Component which takes care of rendering the screen for a route.\n * It provides all required contexts and applies optimizations when applicable.\n */\nexport default function SceneView<\n  State extends NavigationState,\n  ScreenOptions extends object,\n  EventMap extends EventMapBase\n>({\n  screen,\n  route,\n  navigation,\n  getState,\n  setState,\n}: Props<State, ScreenOptions, EventMap>) {\n  const navigatorKeyRef = React.useRef<string | undefined>();\n\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n  const setKey = React.useCallback((key: string) => {\n    navigatorKeyRef.current = key;\n  }, []);\n\n  const getCurrentState = React.useCallback(() => {\n    const state = getState();\n    const currentRoute = state.routes.find((r) => r.key === route.key);\n\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n\n  const setCurrentState = React.useCallback(\n    (child: NavigationState | PartialState<NavigationState> | undefined) => {\n      const state = getState();\n\n      setState({\n        ...state,\n        routes: state.routes.map((r) =>\n          r.key === route.key ? { ...r, state: child } : r\n        ),\n      });\n    },\n    [getState, route.key, setState]\n  );\n\n  const context = React.useMemo(\n    () => ({\n      state: route.state,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      getKey,\n      setKey,\n    }),\n    [getCurrentState, getKey, route.state, setCurrentState, setKey]\n  );\n\n  return (\n    <NavigationContext.Provider value={navigation}>\n      <NavigationRouteContext.Provider value={route}>\n        <NavigationStateContext.Provider value={context}>\n          <EnsureSingleNavigator>\n            <StaticContainer\n              name={screen.name}\n              // @ts-ignore\n              render={screen.component || screen.children}\n              navigation={navigation}\n              route={route}\n            >\n              {'component' in screen && screen.component !== undefined ? (\n                // @ts-ignore\n                <screen.component navigation={navigation} route={route} />\n              ) : 'children' in screen && screen.children !== undefined ? (\n                // @ts-ignore\n                screen.children({ navigation, route })\n              ) : null}\n            </StaticContainer>\n          </EnsureSingleNavigator>\n        </NavigationStateContext.Provider>\n      </NavigationRouteContext.Provider>\n    </NavigationContext.Provider>\n  );\n}\n"]}