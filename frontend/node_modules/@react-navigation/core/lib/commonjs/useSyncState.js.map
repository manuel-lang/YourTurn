{"version":3,"sources":["useSyncState.tsx"],"names":["UNINTIALIZED_STATE","useSyncState","initialState","stateRef","React","useRef","isSchedulingRef","current","trackingState","setTrackingState","useState","getState","useCallback","setState","state","scheduleUpdate","callback","flushUpdates"],"mappings":";;;;;;;AAAA;;;;;;AAEA,MAAMA,kBAAkB,GAAG,EAA3B;AAEA;;;;AAGe,SAASC,YAAT,CAAyBC,YAAzB,EAAuD;AACpE,QAAMC,QAAQ,GAAGC,KAAK,CAACC,MAAN,CAAgBL,kBAAhB,CAAjB;AACA,QAAMM,eAAe,GAAGF,KAAK,CAACC,MAAN,CAAa,KAAb,CAAxB;;AAEA,MAAIF,QAAQ,CAACI,OAAT,KAAqBP,kBAAzB,EAA6C;AAC3CG,IAAAA,QAAQ,CAACI,OAAT,GACE;AACA,WAAOL,YAAP,KAAwB,UAAxB,GAAqCA,YAAY,EAAjD,GAAsDA,YAFxD;AAGD;;AAED,QAAM,CAACM,aAAD,EAAgBC,gBAAhB,IAAoCL,KAAK,CAACM,QAAN,CAAeP,QAAQ,CAACI,OAAxB,CAA1C;AAEA,QAAMI,QAAQ,GAAGP,KAAK,CAACQ,WAAN,CAAkB,MAAMT,QAAQ,CAACI,OAAjC,EAA0C,EAA1C,CAAjB;AAEA,QAAMM,QAAQ,GAAGT,KAAK,CAACQ,WAAN,CAAmBE,KAAD,IAAc;AAC/C,QAAIA,KAAK,KAAKX,QAAQ,CAACI,OAAvB,EAAgC;AAC9B;AACD;;AAEDJ,IAAAA,QAAQ,CAACI,OAAT,GAAmBO,KAAnB;;AAEA,QAAI,CAACR,eAAe,CAACC,OAArB,EAA8B;AAC5BE,MAAAA,gBAAgB,CAACK,KAAD,CAAhB;AACD;AACF,GAVgB,EAUd,EAVc,CAAjB;AAYA,QAAMC,cAAc,GAAGX,KAAK,CAACQ,WAAN,CAAmBI,QAAD,IAA0B;AACjEV,IAAAA,eAAe,CAACC,OAAhB,GAA0B,IAA1B;;AAEA,QAAI;AACFS,MAAAA,QAAQ;AACT,KAFD,SAEU;AACRV,MAAAA,eAAe,CAACC,OAAhB,GAA0B,KAA1B;AACD;AACF,GARsB,EAQpB,EARoB,CAAvB;AAUA,QAAMU,YAAY,GAAGb,KAAK,CAACQ,WAAN,CAAkB,MAAM;AAC3C;AACA;AACAH,IAAAA,gBAAgB,CAACN,QAAQ,CAACI,OAAV,CAAhB;AACD,GAJoB,EAIlB,EAJkB,CAArB,CApCoE,CA0CpE;AACA;;AACA,MAAIC,aAAa,KAAKL,QAAQ,CAACI,OAA/B,EAAwC;AACtCE,IAAAA,gBAAgB,CAACN,QAAQ,CAACI,OAAV,CAAhB;AACD;;AAED,QAAMO,KAAK,GAAGX,QAAQ,CAACI,OAAvB;AAEA,SAAO,CAACO,KAAD,EAAQH,QAAR,EAAkBE,QAAlB,EAA4BE,cAA5B,EAA4CE,YAA5C,CAAP;AACD","sourcesContent":["import * as React from 'react';\n\nconst UNINTIALIZED_STATE = {};\n\n/**\n * This is definitely not compatible with concurrent mode, but we don't have a solution for sync state yet.\n */\nexport default function useSyncState<T>(initialState?: (() => T) | T) {\n  const stateRef = React.useRef<T>(UNINTIALIZED_STATE as any);\n  const isSchedulingRef = React.useRef(false);\n\n  if (stateRef.current === UNINTIALIZED_STATE) {\n    stateRef.current =\n      // @ts-ignore\n      typeof initialState === 'function' ? initialState() : initialState;\n  }\n\n  const [trackingState, setTrackingState] = React.useState(stateRef.current);\n\n  const getState = React.useCallback(() => stateRef.current, []);\n\n  const setState = React.useCallback((state: T) => {\n    if (state === stateRef.current) {\n      return;\n    }\n\n    stateRef.current = state;\n\n    if (!isSchedulingRef.current) {\n      setTrackingState(state);\n    }\n  }, []);\n\n  const scheduleUpdate = React.useCallback((callback: () => void) => {\n    isSchedulingRef.current = true;\n\n    try {\n      callback();\n    } finally {\n      isSchedulingRef.current = false;\n    }\n  }, []);\n\n  const flushUpdates = React.useCallback(() => {\n    // Make sure that the tracking state is up-to-date.\n    // We call it unconditionally, but React should skip the update if state is unchanged.\n    setTrackingState(stateRef.current);\n  }, []);\n\n  // If we're rendering and the tracking state is out of date, update it immediately\n  // This will make sure that our updates are applied as early as possible.\n  if (trackingState !== stateRef.current) {\n    setTrackingState(stateRef.current);\n  }\n\n  const state = stateRef.current;\n\n  return [state, getState, setState, scheduleUpdate, flushUpdates] as const;\n}\n"]}